#Created on Jun 20 01:23:25 2018
#@author: Diego Chou Pazo Blanco based on the code of Pedro Leal

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       Import necessary modules
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

import subprocess as sp
import os # To check for already existing files and delete them
import sys
import numpy as np

def save_polar(airfoil, alfas, Reynolds=0, Mach=0, iteration=200):
    """ Call xfoil through Python.

    The input variables are:

    :param airfoil: is the name of the plain filewhere the airfoil 
                    geometry is stored (variable airfoil).
        
    :param alfas: list/array/float/int of angles of attack.

    :param Reynolds: Reynolds number in case the simulation is for a
                     viscous flow.

    :param Mach: Mach number in case the simulation has to take in
          account compressibility effects through the Prandtl-Glauert
          correlation.

    :param iteration: changes how many times XFOIL will try to make the
          results converge. Specially important for viscous flows

    As a side note, it is much more eficient to run a single run with
    multiple angles of attack rather than multiple runs, each with a
    single angle of attack.
    """
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #                               Functions
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def issueCmd(cmd, echo=False):
        string = cmd + '\n'

        ps.stdin.write(string.encode('utf-8'))
        if echo:
            print(cmd)

    def submit(alfa):
        """
        Submit job to xfoil and saves files
        """
        issueCmd('ALFA %.4f' % (alfa,))
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #                Characteristics of the simulation
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    # Single or multiple runs?
    try :
        list(alfas)
        Multiple = True
    except :
        Multiple = False

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #                           Start Xfoil
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#    """For communication with the xfoil through the command line the
#    Popen class from subprocess is used. stdin and stdout both
#    represent inputs and outputs with the process run on the command
#    line, in this case, xfoil.

    # Random output variable to avoid writing stuff from xfoil on the
    # console
    sout = 0#open("Perfis/xfoil_log.txt",'w')
    
    if sys.platform.startswith('linux'):     
        # Calling xfoil with Poper
        ps = sp.Popen(['./xfoil_linux.exe'],
                      stdin=sp.PIPE,
                      stdout=sout,
                      stderr=None)
        
    elif sys.platform.startswith('win'):
        # The following keys avoid the xfoil pop-up
        # source: http://stackoverflow.com/questions/1765078/how-to-avoid- 
        # console-window-with-pyw-file-containing-os-system-call
#        startupinfo = sp.STARTUPINFO()
#        startupinfo.dwFlags |= sp.STARTF_USESHOWWINDOW

        # Calling xfoil with Poper
        ps = sp.Popen(['xfoil_windows.exe'],
                      stdin=sp.PIPE,
                      stdout=sout,
                      stderr=None,
#                      startupinfo = startupinfo,
                      )
    # Loading geometry
    issueCmd('load %s' % airfoil)
    
    # Once you load a set of points in Xfoil you need to create a
    # name, however we do not need to give it a name
    issueCmd('')
    
    # Read geometry points based on curvature to smooth airfoil and
    # prevent convergence problems
#    issueCmd('PANE')

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Opening OPER module in Xfoil
    issueCmd('OPER')

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #                Applying effects of vicosity
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    issueCmd('iter')
    issueCmd('%d' % iteration)
    
    # Defining the system as viscous
    issueCmd('v')
    # Defining Reynolds number
    issueCmd('%f' % Reynolds)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #    Defining Mach number for Prandtl-Gauber correlation
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    issueCmd('MACH %s' % Mach)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #                     Submitting
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    issueCmd('PACC')
    # All file names in this library are generated by the
    # filename functon.
    filename = file_name(airfoil, Reynolds)
    try:
        os.remove(filename)
    except OSError:
        pass

    issueCmd('%s' % filename)
    issueCmd('')
    
    # For several angles of attack
    if Multiple == True:
        for i in range(len(alfas)):
            if i%4 == 0 and i != 0:
                issueCmd('INIT') #Initializes boundary layer to avoid convergence problems.
            submit(alfas[i])

    # For only one angle of attack
    else:
        submit(alfas)
    
    # Exiting
    # From OPER mode
    issueCmd('')
    # From xfoil
    issueCmd('QUIT')
    # From stdin
    ps.stdin.close()
    # From popen. Process times out after 60s.
    ps.wait(timeout=60)

def file_name(airfoil, Re):
    
    airfoil = airfoil[:-4]
    Re = Re*10**-6
    
    return airfoil + '_polarXFoil_Re' + '%.3f' %Re  + '.txt'
